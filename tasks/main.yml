---
# tasks file for golem-source

- name: create group
  become: yes
  group:
    name: "{{ golem_source_user_group }}"
    system: yes
    state: present

- name: create golem user
  become: yes
  user:
    name: "{{ golem_source_user }}"
    home: "{{ golem_source_user_home }}"
    system: yes
    group: "{{ golem_source_user_group }}"
    groups: docker
    append: yes
    state: present

- name: stop
  when: golem_source_reinstall
  become: yes
  systemd:
    name: "{{ golem_source_unit_name }}"
    state: stopped
  notify: restart golem

- name: create keystore backup directory
  # when: golem_source_reinstall
  become: yes
  file:
    path: "{{ golem_source_keystore_backup_path }}"
    state: directory
    owner: "{{ golem_source_user }}"
    group: "{{ golem_source_user_group }}"

- name: create current date keystore directory
  # when: golem_source_reinstall
  become: yes
  file:
    path: "{{ golem_source_keystore_backup_path}}/{{ current_date_time }}"
    state: directory
    owner: "{{ golem_source_user }}"
    group: "{{ golem_source_user_group }}"

- name: backup keystore files
  # when: golem_source_reinstall
  become: yes
  command: "cp -rf {{ golem_source_config_path }}/keys {{ golem_source_keystore_backup_path}}/{{ current_date_time }}/"
  ignore_errors: True

- name: cleanup
  when: golem_source_reinstall
  become: yes
  file:
    path: "{{ golem_source_path }}"
    state: absent

- name: cleanup config
  when: golem_source_reinstall
  become: yes
  file:
    path: "{{ golem_source_config_dir }}"
    state: absent

- name: create directory for golem
  become: yes
  file:
    path: "{{ golem_source_path }}"
    state: directory
    owner: "{{ golem_source_user }}"
    group: "{{ golem_source_user_group }}"

- name: clone git source
  when: not golem_source_use_local_clone
  become: yes
  git:
    repo: "{{ golem_source_repo }}"
    dest: "{{ golem_source_path }}"
    version: "{{ golem_source_version }}"
  register: golem_source_dest_git_repo
  notify: restart golem

# this makes the file a bit shorter
# and allows to not overwrite registered variables
- include_tasks: use_local_clone.yml
  when: golem_source_use_local_clone

- name: Add python 3.6 repo
  when: ansible_distribution_version is version('18.04', '<')
  become: yes
  block:
    - name: Add python 3.6 repository apt key
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: 4ab0f789cba31744cc7da76a8cf63ad3f06fc659

    - name: Remove old python 3.6 repo
      apt_repository:
        repo: "ppa:jonathonf/python-3.6"
        state: absent

    - name: Add python 3.6 repo
      apt_repository:
        repo: "ppa:deadsnakes/ppa"
        update_cache: yes

- name: install dependencies
  become: yes
  apt:
    update_cache: yes
    name:
      - python3.6
      - python3.6-venv
      - python3.6-dev
      - libffi-dev
      - libssl-dev
      - virtualenv
      - build-essential
      - automake
      - pkg-config
      - libtool
      - libgmp-dev
  ignore_errors: True

- name: make sure owner of the directory is golem user
  become: yes
  args:
    warn: false
  command: "chown -R {{ golem_source_user }}: {{ golem_source_user_home }}"

- name: install pip
  become: yes
  shell: 'curl https://bootstrap.pypa.io/get-pip.py | sudo -H python3.6'

- name: upgrade pip
  become: yes
  become_user: "{{ golem_source_user }}"
  pip:
    name: pip
    state: latest
    virtualenv: "{{ golem_source_path }}/venv"
    virtualenv_python: /usr/bin/python3.6
  ignore_errors: True

- name: pip install requirements
  become: yes
  become_user: "{{ golem_source_user }}"
  pip:
    requirements: "{{ golem_source_path }}/requirements.txt"
    virtualenv: "{{ golem_source_path }}/venv"
    virtualenv_python: /usr/bin/python3.6

- name: download rustup
  become: yes
  become_user: "{{ golem_source_user }}"
  get_url:
    url: "https://sh.rustup.rs"
    dest: "/tmp/rustup.sh"
    mode: 0775

- name: run rustup and install rust
  become: yes
  become_user: "{{ golem_source_user }}"
  command: "/tmp/rustup.sh --default-toolchain stable --default-host x86_64-unknown-linux-gnu -y"

- name: add rust configuration to profile
  become: yes
  become_user: "{{ golem_source_user }}"
  lineinfile:
    path: "{{ golem_source_user_home }}/.bashrc"
    regexp: '^source $HOME/\.cargo/env'
    line: 'source $HOME/.cargo/env'

- name: run python setup.py develop
  become: yes
  shell: "sudo -iu {{ golem_source_user }} bash -c \"cd {{ golem_source_path }}; venv/bin/python3 setup.py develop\""
  args:
    executable: /bin/bash
    warn: false

- name: set version
  become: yes
  become_user: "{{ golem_source_user }}"
  command: ./venv/bin/python3 -c "from setup_util.setup_commons import get_version; get_version()"
  args:
    chdir: "{{ golem_source_path }}"
  changed_when: golem_source_dest_git_repo is changed

- name: create directory for golem config
  become: yes
  become_user: "{{ golem_source_user }}"
  file:
    path: "{{ golem_source_config_dir }}"
    state: directory
    owner: "{{ golem_source_user }}"
    group: "{{ golem_source_user_group }}"

- name: create directory for golem config path
  become: yes
  become_user: "{{ golem_source_user }}"
  file:
    path: "{{ golem_source_config_path }}"
    state: directory
    owner: "{{ golem_source_user }}"
    group: "{{ golem_source_user_group }}"

- name: create bare config file
  become: yes
  become_user: "{{ golem_source_user }}"
  copy:
    content: |
      [Node]
    dest: "{{ golem_source_config_path }}/app_cfg.ini"
    force: no
    owner: "{{ golem_source_user }}"
    group: "{{ golem_source_user_group }}"

- name: configure golem
  become: yes
  become_user: "{{ golem_source_user }}"
  lineinfile:
    path: "{{ golem_source_config_path }}/app_cfg.ini"
    state: present
    regexp: "^{{ item.key }} = "
    line: "{{ item.key }} = {{ item.value }}"
  loop: "{{ golem_source_config_default | combine(golem_source_config) | dict2items }}"
  notify: restart golem

- name: configure denied nodes
  become: yes
  become_user: "{{ golem_source_user }}"
  template:
    src: "deny.txt.j2"
    dest: "{{ golem_source_config_path }}/deny.txt"
  notify: restart golem

- name: create systemd unit
  become: yes
  template:
    src: golem.service.j2
    dest: "/etc/systemd/system/{{ golem_source_unit_name }}.service"
  notify: restart golem

- name: start golem
  become: yes
  systemd:
    daemon_reload: yes
    name: "{{ golem_source_unit_name }}"
    state: started
    enabled: yes

- name: configure resources
  when: golem_source_resource_settings
  block:
    - name: waiting for golem to become ready
      shell: "{{ golem_source_cli }} account info | grep Golem_ID | awk '{print $2}'"
      changed_when: False
      register: golem_source_node_id
      until: golem_source_node_id.stdout != ""
      # generating keys and downloading docker images might take a while
      retries: 10
      delay: 60

    - name: configure resources
      shell: "{{ golem_source_cli }} settings set {{ item.key }} {{ item.value }}"
      loop: "{{ golem_source_resource_settings|dict2items }}"
